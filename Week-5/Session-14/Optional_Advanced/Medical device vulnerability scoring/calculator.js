const selectedButtons = [];
const availableButtons = ["AV", "AC", "PR", "UI", "scope", "conf", "integ", "avail", "health", "sens"];

const values = {
	scope_U: 1.0,
	scope_C: 1.08,
	UI_N: 0.85,
	UI_R: 0.62,
	PR_N: 0.85,
	PR_L: 0.62,
	PR_H: 0.27,
	AC_L: 0.77,
	AC_H: 0.44,
	AV_N: 0.85,
	AV_A: 0.62,
	AV_L: 0.55,
	AV_P: 0.2,
	conf_N: 0.0,
	conf_L: 0.22,
	conf_H: 0.22,
};

const baseConfidentiality = (sensitivity, confidentiality) => {
	if (sensitivity === "sens_N" && confidentiality === "conf_N") return 0.0;
	if (sensitivity === "sens_N" && confidentiality === "conf_L") return 0.22;
	if (sensitivity === "sens_N" && confidentiality === "conf_H") return 0.56;
	if (sensitivity === "sens_L" && confidentiality === "conf_N") return 0.0;
	if (sensitivity === "sens_L" && confidentiality === "conf_L") return 0.65;
	if (sensitivity === "sens_L" && confidentiality === "conf_H") return 0.75;
	if (sensitivity === "sens_H" && confidentiality === "conf_N") return 0.0;
	if (sensitivity === "sens_H" && confidentiality === "conf_L") return 0.85;
	if (sensitivity === "sens_H" && confidentiality === "conf_H") return 0.95;
};

const baseIntegrity = (healthImpact, integrity) => {
	if (healthImpact === "health_N" && integrity === "integ_N") return 0.0;
	if (healthImpact === "health_N" && integrity === "integ_L") return 0.22;
	if (healthImpact === "health_N" && integrity === "integ_H") return 0.56;
	if (healthImpact === "health_L" && integrity === "integ_N") return 0.55;
	if (healthImpact === "health_L" && integrity === "integ_L") return 0.6;
	if (healthImpact === "health_L" && integrity === "integ_H") return 0.75;
	if (healthImpact === "health_H" && integrity === "integ_N") return 0.85;
	if (healthImpact === "health_H" && integrity === "integ_L") return 0.9;
	if (healthImpact === "health_H" && integrity === "integ_H") return 0.95;
};

const baseAvailability = (healthImpact, availability) => {
	if (healthImpact === "health_N" && availability === "avail_N") return 0.0;
	if (healthImpact === "health_N" && availability === "avail_L") return 0.22;
	if (healthImpact === "health_N" && availability === "avail_H") return 0.56;
	if (healthImpact === "health_L" && availability === "avail_N") return 0.55;
	if (healthImpact === "health_L" && availability === "avail_L") return 0.6;
	if (healthImpact === "health_L" && availability === "avail_H") return 0.65;
	if (healthImpact === "health_H" && availability === "avail_N") return 0.85;
	if (healthImpact === "health_H" && availability === "avail_L") return 0.9;
	if (healthImpact === "health_H" && availability === "avail_H") return 0.95;
};

const main = document.getElementById("main");

main.addEventListener("click", (event) => {
	if (event.target.nodeName === "INPUT") {
		if (!selectedButtons.includes(event.target.name)) selectedButtons.push(event.target.name);
		if (checkAllButtonSelected(selectedButtons, availableButtons)) {
			document.getElementById("warning").style.visibility = "hidden";
			updateScore();
		}
	}
});

const checkAllButtonSelected = (array1, array2) => {
	if (array1.length !== array2.length) return false;

	const sortedArray1 = array1.slice().sort();
	const sortedArray2 = array2.slice().sort();

	for (let i = 0; i < sortedArray1.length; i++) {
		if (sortedArray1[i] !== sortedArray2[i]) return false;
	}

	return true;
};

const updateScore = () => {
	const sensitivity = document.querySelector('input[name="sens"]:checked').value;
	const confidentiality = document.querySelector('input[name="conf"]:checked').value;
	const healthImpact = document.querySelector('input[name="health"]:checked').value;
	const integrity = document.querySelector('input[name="integ"]:checked').value;
	const availability = document.querySelector('input[name="avail"]:checked').value;

	const attackVector = values[document.querySelector('input[name="AV"]:checked').value];
	const attackComplexity = values[document.querySelector('input[name="AC"]:checked').value];
	const privilegedRequired = values[document.querySelector('input[name="PR"]:checked').value];
	const userInteraction = values[document.querySelector('input[name="UI"]:checked').value];
	const scopeStatus = values[document.querySelector('input[name="scope"]:checked').value];

	const baseConfidentialityResult = baseConfidentiality(sensitivity, confidentiality);
	const baseIntegrityResult = baseIntegrity(healthImpact, integrity);
	const baseAvailabilityResult = baseAvailability(healthImpact, availability);

	const scoreBase = baseConfidentialityResult + baseIntegrityResult + baseAvailabilityResult;
	const scoreExploitability = attackVector * attackComplexity * privilegedRequired * userInteraction;

	let scoreFinal = 0;

	if (scoreBase !== 0) scoreFinal = scopeStatus * (3.326258289 * scoreBase) + 1.1 * scoreExploitability;

	scoreFinal = Math.ceil(scoreFinal * 10) / 10;
	document.getElementById("score").innerText = scoreFinal;
};